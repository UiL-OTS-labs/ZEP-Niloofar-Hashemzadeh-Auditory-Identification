/******************************************************************************\
FILE:           task.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Implementation of task: Auditory Identification with Yes-No Response
See readme.txt for more information.


Global structure of this experiment phase:

  - instructions

  - practice part
      trial

  - pause

  - test part
      trial


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

//requires 1.12;

import defs;
import stimuli;
import shuffle;
import output;
import test_page;


Block task
{
    on_event:entry()
    {
        // Randomize test items table.
        if (shuffle_test_items() != OK) {
            println("Failed to shuffle the test items!");
            dump_test_items(test_items);
            terminate;
        }
    }


    Part instructions
    {
        on_event:entry()
        {
            audio_instruction_page.setup("instruction/intro.wav");
            audio_instruction_page.action(this);
        }
    }

    Block practice
    {
        TestItem        item;   // current item

        on_event:entry()
        {
            num_cycles = prac_items.size;

            // Prepare test page: progress bar and prompt enabled.
            test_page.setup(num_cycles, true, false);
        }

        on_event:exit()
        {
            test_page.cleanup();
        }

        Trial trial
        {
            on_event:entry()
            {
                item = prac_items[practice.cycle];

                test_page.action(this, item, reference_time, practice.cycle);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }


    Part pause
    {
        on_event:entry()
        {
            audio_instruction_page.setup("instruction/post-practice.wav");
            audio_instruction_page.action(this);
        }
    }


    Block test
    {
        TestItem        item;   // current item


        on_event:entry()
        {
            num_cycles = test_items.size;
//            num_cycles = 3;

            // Prepare test page: progress bar enabled, prompt disabled.
            test_page.setup(num_cycles, false);
        }


        on_event:exit()
        {
            test_page.cleanup();

            // Save test output table as CSV file.
            test_output_save();
        }


        Trial trial
        {
            on_event:entry()
            {
                item = test_items[test.cycle];

                test_page.action(this, item, reference_time, test.cycle);
            }


            on_event:exit()
            {
                // Add new row to test output table.
                TestOutput output;
                output.trialnum            = test.cycle + 1;
                output.unique_identifier   = item.unique_identifier;
                output.set_identifier      = item.set_identifier;
                output.sound_filename      = item.sound_filename;
                output.reaction_time_delay = item.reaction_time_delay;
                output.start_sentence      = item.start_sentence;
                output.critical_word       = item.critical_word;
                output.critical_word_onset = item.critical_word_onset;
                output.facial_type         = item.facial_type;
                output.pronoun_type        = item.pronoun_type;
                output.expected_answer     = item.expected_answer;
                output.answer              = test_page.response.value;
                output.correctness         = test_page.response.correctness;
                output.rt                  = test_page.response.rt;

                output.gender              = expdb.participant.get_enum_field(GENDER_DESCRIPTION);
                output.age                 = expdb.participant.get_string_field(AGE_DESCRIPTION) ;
                output.list_nr             = expdb.participant.get_int_field(LIST_DESCRIPTION);

                test_output_append(output);
            }
        }
    }


    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
        }
    }
}


void action(Part caller)
{
    // Activate the task. When the task is done, the registered caller
    // (c.q. the main experiment object) will automatically be signalled.
    task.enter(caller);
}
