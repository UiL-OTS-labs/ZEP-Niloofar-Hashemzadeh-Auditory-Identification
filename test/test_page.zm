/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2012-01-30 TV   Created.

\******************************************************************************/

import std_sound_output_device;


Page test_page
{
    TestItem    item;           // trial control parameters


    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }

    on_event:message()
    {
        // Process button-box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }

    on_event:key_press()
    {
        // Handle left-shift (no) and right-shift (yes).
        if (input_key == KEY_Shift_L)
            response.process_hit(0, event_time);
        else if (input_key == KEY_Shift_R)
            response.process_hit(1, event_time);
        else
            handle_special_key(this, input_key, input_modifiers);
    }


    HorizontalLayout layout
    {
        init()
        {
            spacing = 0;
            height = 0;     // 0 means as large as possible
        }

        CanvasGadget left_canvas
        {
            void feedback() {
                fill_pattern_color=rgb:F74040;
                neg.alpha = 1.0;
            }
            void setup()
            {
                is_visible=true;
                fill_pattern_color = rgb:F79999;
                size = test_window1.width/2, test_window1.height;
                offset_x = width / 2;
                offset_y = height / 3;

                neg.alpha = 0.5;
            }

            RectangleShape neg
            {
                init()
                {
                    is_visible=true;
                    alpha=0.5;
                    height=20;
                    width=200;
                    x=floor(-width/2.0);
                    fill_pattern_color = color:black;
                }
            }
        }

        CanvasGadget right_canvas
        {
            void feedback()
            {
                fill_pattern_color=rgb:3CE84A;
                pos.alpha = 1.0;
            }

            void setup()
            {
                is_visible=true;
                fill_pattern_color = rgb:85E58D;

                size = test_window1.width/2, test_window1.height;
                offset_x = width / 2;
                offset_y = height / 3;

                pos.alpha = 0.5;
            }

            CrossShape pos
            {
                init()
                {
                    is_visible=true;
                    line_pattern_color = color:black;
                    alpha=0.5;
                    radius = layout.left_canvas.neg.width/2;
                    line_width = layout.left_canvas.neg.height;
                }
            }

        }


        void reset()
        {
            full_abort();
            left_canvas.setup();
            right_canvas.setup();
        }
    }


    SoundChain stimulus
    {
        // Sound source/producer object.
        SoundFile clip {}


        // Sound sink/consumer object.
        SoundPlayback playback {}


        time play(time t)
        {
            abort();

            playback.device = sound_output_device;
            clip.file = stimuli_dir() + "sounds/" + item.sound_filename;

            start(t);

            return expected_finish_time;
        }
    }


    Response response
    {
        // Response data.
        int     value;          // response value: 0=no, 1=yes
        int     correctness;          // response value: 0=no, 1=yes
        int     rt;

        void clear()
        {
            value = -1;
            correctness = -1;
            rt = -1;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the
            // response interval.
            if (validity == HIT_VALID)
            {
                response.value = val;
                response.rt = int(reaction_time(0));
                response.correctness = val == item.expected_answer? 1 : 0;

                ignore_remaining_hits();

                if(val == 0)
                    layout.left_canvas.feedback();
                else
                    layout.right_canvas.feedback();


                stop(t+500ms);
            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }

        on_event:finish()
        {
            real feedback = 0;
            if (num_valid_hits > 0) feedback = correctness ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, feedback,
                    FEEDBACK_DURATION))
                done(CONTINUE);
        }

       on_event:message()
       {
           done(CONTINUE);
       }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        layout.reset();

        // Just in case; abort presentation if still active.
        stimulus.abort();

        signal_target(msgid);   // tell caller we're done
        target = null;

        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this, fb);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ?
            "are both words real words?" : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable button-box buttons 0 and 1 for resp. no(0) and yes(1).
        control.target = this;
        control.button_box.disable_buttons();
        control.button_box.enable_button(0, 0); // button 0 means no(0)
        control.button_box.enable_button(2, 1); // button 1 means yes(1)
    }

    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;

        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);

        // Reset response data.
        response.clear();

        // Resets layout
        layout.reset();

        // Start stimulus at fixation offset.
        time stimoffset = stimulus.play(tref);

        // Response interval starts at stimulus offset.
        response.start(stimoffset);


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.unique_identifier) + "  " +
            string(item.expected_answer));


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
